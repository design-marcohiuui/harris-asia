rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    match /storage {
    	allow read, write: if request.auth.uid != null;
    }
    match /users {
    	allow read: if request.auth != null;
    }
  	match /users/{userId} {
      allow write, read: if isOwner(userId);
    }

    // Reusable function to determine document ownership
    function isOwner(userId) {
        return request.auth.uid == resource.data.uid;
    }
    function isSignedIn() {
      return request.auth != null;
    }
    function emailVerified() {
      return request.auth.token.email_verified;
    }
    function userExists() {
      return exists(/databases/$(database)/users/$(request.auth.uid));
    }

    // [READ] Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }
    // [WRITE] Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }

    function userEmail(userId) {
      return get(/databases/$(database)/users/$(userId)).data.email;
    }
  }
}